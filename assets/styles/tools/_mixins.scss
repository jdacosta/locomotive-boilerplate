// =============================================================================
// Tools \ Mixins
// =============================================================================

$global-font-file-formats: "woff", "ttf" !default;

///
/// Generates an `@font-face` delcaration.
///
/// You can choose the specific file formats you need to output; the mixin supports
/// `eot`, `ttf`, `svg`, `woff2` and `woff`.
///
/// @link https://github.com/thoughtbot/bourbon/blob/master/core/bourbon/library/_font-face.scss
///
/// @param {String}      $font-family - The font family name.
/// @param {String}      $file-path   - The path to the font family.
/// @param {String|List} $file-formats [("ttf", "woff2", "woff")]
///     A list of file formats to support,
///     for example ("eot", "ttf", "svg", "woff2", "woff").
///
/// @content
///     Any additional CSS properties that are included in the `@include`
///     directive will be output within the `@font-face` declaration, e.g.
///     you can pass in `font-weight`, `font-style` and/or `unicode-range`.
///
/// @example scss
///   @include font-face(
///       "source-sans-pro",
///       "fonts/source-sans-pro-regular",
///       ("woff2", "woff")
///     ) {
///     font-style: normal;
///     font-weight: 400;
///   }
///
///   // CSS Output
///   @font-face {
///     font-family: "source-sans-pro";
///     src: url("fonts/source-sans-pro-regular.woff2") format("woff2"),
///          url("fonts/source-sans-pro-regular.woff") format("woff");
///     font-style: normal;
///     font-weight: 400;
///   }
///
/// @require {function} _font-source-declaration
/// @require {function} _retrieve-bourbon-setting
///
@mixin font-face(
	$font-family,
	$file-path,
	$file-formats: $global-font-file-formats
) {
	@font-face {
		font-family: $font-family;
		src: font-source-declaration( $font-family, $file-path, $file-formats);
		@content;
	}
}

///
/// Vertically-center the direct descendants of the current element.
///
/// Centering is achieved by displaying children as inline-blocks. Any whitespace
/// between elements is nullified by redefining the font size of the container
/// and its children.
///
/// @output `font-size`, `display`, `vertical-align`
///
@mixin o-vertical-center
{
	font-size: 0;

	&::before {
		display:        inline-block;
		height:         100%;
		content:        "";
		vertical-align: middle;
	}

	> * {
		display:        inline-block;
		font-size:      1rem;
		vertical-align: middle;
	}
}

///
/// Standard clearfix rules for containing floats.
///
/// Make an element expand to contain floated children.
/// Uses pseudo-elements (micro clearfix).
///
/// 1. The space content is one way to avoid an Opera bug when the
///    `contenteditable` attribute is included anywhere else in the document.
///    Otherwise it causes space to appear at the top and bottom of the
///    element.
/// 2. The use of `table` rather than `block` is only necessary if using
///    `::before` to contain the top-margins of child elements.
///
/// @link   css-101.org/articles/clearfix/latest-new-clearfix-so-far.php CSS Mojo
/// @link   https://github.com/inuitcss/trumps.clearfix
/// @output Injects `:::after` pseudo-element.
///
@mixin u-clearfix
{
	&::after {
		display: table; // [1]
		clear:   both; // [2]
		content: "";
	}
}

///
/// Generate `:hover` and `:focus` styles in one go.
///
/// @link    https://github.com/inuitcss/inuitcss/blob/master/tools/_tools.mixins.scss
/// @content Wrapped in `:focus` and `:hover` pseudo-classes.
/// @output  Wraps the given content in `:focus` and `:hover` pseudo-classes.
///
@mixin u-hocus
{
	&:focus,
	&:hover {
		@content;
	}
}

///
/// Generate `:active` and `:focus` styles in one go.
///
/// @see     {Mixin} u-hocus
/// @content Wrapped in `:focus` and `:active` pseudo-classes.
/// @output  Wraps the given content in `:focus` and `:hover` pseudo-classes.
///
@mixin u-actus
{
	&:focus,
	&:active {
		@content;
	}
}

///
/// Injects generic rules for disabling UL/OL/LI styles.
///
/// @output `list-style`, `margin`, `padding`
///
@mixin u-list-reset
{
	margin:     0;
	padding:    0;
	list-style: none;
}

///
/// Prevent text from wrapping onto multiple lines for the current element.
///
/// An ellipsis is appended to the end of the line.
///
/// 1. Ensure that the node has a maximum width after which truncation can occur.
/// 2. Fix for IE 8/9 if `word-wrap: break-word` is in effect on ancestor nodes.
///
/// @param  {Number} $width [100%] - The maximum width of element.
/// @output `max-width`, `word-wrap`, `white-space`, `overflow`, `text-overflow`
///
@mixin u-truncate($width: 100%)
{
	@if $width {
		max-width: $width; // [1]
	}
	word-wrap:     normal;  // [2]
	white-space:   nowrap;
	overflow:      hidden;
	text-overflow: ellipsis;
}

///
/// Applies accessible hiding to the current element.
///
/// @param  {Boolean} $important [true] - Whether the visibility is important.
/// @output Properties for removing the element from the document flow.
///
@mixin u-accessibly-hidden($important: true)
{
	$important: important($important);

	position: absolute $important;
	overflow: hidden;
	height:   1px;
	width:    1px;
	padding:  0;
	margin:   0;
	border:   0;
	clip:     rect(0 0 0 0);
}

///
/// Allows an accessibly hidden element to be focusable via keyboard navigation.
///
/// @content For styling the now visible element.
/// @output  Injects `:focus`, `:active` pseudo-classes.
///
@mixin u-accessibly-focusable
{
	@include u-actus {
		height : auto;
		width  : auto;
		clip   : auto;

		@content;
	}
}

///
/// Hide the current element from all.
///
/// The element will be hidden from screen readers and removed from the document flow.
///
/// @link   http://juicystudio.com/article/screen-readers-display-none.php
/// @param  {Boolean} $important [true] - Whether the visibility is important.
/// @output `display`, `visibility`
///
@mixin u-hidden($important: true)
{
	$important: important($important);

	display    : none   $important;
	visibility : hidden $important;
}

///
/// Show the current element for all.
///
/// The element will be accessible from screen readers and visible in the document flow.
///
/// @param  {String}  $display   [block] - The rendering box used for the element.
/// @param  {Boolean} $important [true]  - Whether the visibility is important.
/// @output `display`, `visibility`
///
@mixin u-shown($display: block, $important: true)
{
	$important: important($important);

	display    : $display $important;
	visibility : visible  $important;
}

///
/// Set the color of the highlight that appears over a link while it's being tapped.
///
/// By default, the highlight is suppressed.
///
/// @param  {Color} $value [rgba(0, 0, 0, 0)] - The value of the highlight.
/// @output `-webkit-tap-highlight-color`
///
@mixin tap-highlight-color($value: rgba(0, 0, 0, 0))
{
	-webkit-tap-highlight-color: $value;
}

///
/// Set whether or not touch devices use momentum-based scrolling for the given element.
///
/// By default, applies momentum-based scrolling for the current element.
///
/// @param  {String} $value [rgba(0, 0, 0, 0)] - The type of scrolling.
/// @output `-webkit-overflow-scrolling`
///
@mixin overflow-scrolling($value: touch)
{
	-webkit-overflow-scrolling: $value;
}
